[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "RNA-seq",
    "section": "",
    "text": "前言：",
    "crumbs": [
      "前言："
    ]
  },
  {
    "objectID": "create-db.html",
    "href": "create-db.html",
    "title": "1  Create genome database",
    "section": "",
    "text": "1.1 Genome sequencing (希望组)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Create genome database</span>"
    ]
  },
  {
    "objectID": "create-db.html#genome-annotationncbi",
    "href": "create-db.html#genome-annotationncbi",
    "title": "1  Create genome database",
    "section": "1.2 Genome annotation（NCBI）",
    "text": "1.2 Genome annotation（NCBI）",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Create genome database</span>"
    ]
  },
  {
    "objectID": "create-db.html#genbank-batch-parsing-and-multiformat-export-bioconda",
    "href": "create-db.html#genbank-batch-parsing-and-multiformat-export-bioconda",
    "title": "1  Create genome database",
    "section": "1.3 GenBank Batch Parsing and Multi‑format Export (bioconda)",
    "text": "1.3 GenBank Batch Parsing and Multi‑format Export (bioconda)\n\n\nCode\nfrom pathlib import Path\nfrom Bio import SeqIO\n\n\nModuleNotFoundError: No module named 'Bio'\n\n\nCode\nimport pandas as pd\n\n\nModuleNotFoundError: No module named 'pandas'\n\n\nCode\ndef gb_to_fasta_gtf_protein(gb_path):\n    gb_path = Path(gb_path)\n    out_dir = gb_path.parent\n    \n    fasta_file = out_dir / f\"{gb_path.stem}.fasta\"\n    gtf_file = out_dir / f\"{gb_path.stem}.gtf\"\n    protein_file = out_dir / f\"{gb_path.stem}_protein.fasta\"\n    \n    # 读取 GenBank 文件\n    records = list(SeqIO.parse(gb_path, \"genbank\"))\n    \n    # 保存基因组序列\n    SeqIO.write(records, fasta_file, \"fasta\")\n    \n    # 生成 GTF 表\n    gtf_rows = []\n    protein_records = []\n    \n    for rec in records:\n        for feature in rec.features:\n            if feature.type in [\"gene\", \"CDS\"]:\n                start = int(feature.location.start) + 1  # GTF 是 1-based\n                end = int(feature.location.end)\n                strand = \"+\" if feature.strand == 1 else \"-\"\n                attr_parts = []\n                \n                # gene_id\n                gene_id = feature.qualifiers.get(\"locus_tag\", [\"NA\"])[0]\n                attr_parts.append(f'gene_id \"{gene_id}\"')\n                \n                # gene_name\n                if \"gene\" in feature.qualifiers:\n                    attr_parts.append(f'gene_name \"{feature.qualifiers[\"gene\"][0]}\"')\n                \n                # product\n                if \"product\" in feature.qualifiers:\n                    attr_parts.append(f'product \"{feature.qualifiers[\"product\"][0]}\"')\n                \n                attributes = \"; \".join(attr_parts)\n                \n                gtf_rows.append([\n                    rec.id, \"GenBank\", feature.type, start, end, \".\", strand, \".\", attributes\n                ])\n                \n                # 蛋白质序列\n                if feature.type == \"CDS\" and \"translation\" in feature.qualifiers:\n                    protein_seq = feature.qualifiers[\"translation\"][0]\n                    protein_records.append(\n                        SeqIO.SeqRecord(\n                            seq=feature.qualifiers[\"translation\"][0],\n                            id=gene_id,\n                            description=feature.qualifiers.get(\"product\", [\"\"])[0]\n                        )\n                    )\n    \n    # 保存 GTF\n    gtf_df = pd.DataFrame(gtf_rows, columns=[\n        \"seqname\", \"source\", \"feature\", \"start\", \"end\", \"score\", \"strand\", \"frame\", \"attribute\"\n    ])\n    gtf_df.to_csv(gtf_file, sep=\"\\t\", index=False, header=False)\n    \n    # 保存蛋白质序列\n    with open(protein_file, \"w\") as f:\n        for rec in protein_records:\n            f.write(f\"&gt;{rec.id} {rec.description}\\n{rec.seq}\\n\")\n    \n    print(f\"已生成：\\n- {fasta_file}\\n- {gtf_file}\\n- {protein_file}\")\n\n# 批量处理两个文件\ngb_files = [\n    r\"rawdata\\Pantoea\\ncbi\\pantoea.gb\",\n    r\"rawdata\\Burkholderia\\ncbi\\Burkholderia.gb\"\n]\n\nfor gb in gb_files:\n    gb_to_fasta_gtf_protein(gb)\n\n\nNameError: name 'SeqIO' is not defined",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Create genome database</span>"
    ]
  },
  {
    "objectID": "create-db.html#kegg-annotation-kegg-web-service",
    "href": "create-db.html#kegg-annotation-kegg-web-service",
    "title": "1  Create genome database",
    "section": "1.4 KEGG annotation (KEGG Web service)",
    "text": "1.4 KEGG annotation (KEGG Web service)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Create genome database</span>"
    ]
  },
  {
    "objectID": "create-db.html#create-and-save-gson-dbfile",
    "href": "create-db.html#create-and-save-gson-dbfile",
    "title": "1  Create genome database",
    "section": "1.5 Create and save gson dbfile",
    "text": "1.5 Create and save gson dbfile\n\n\nCode\nlibrary(KEGGREST)\nlibrary(dplyr)\n\n\n\n载入程辑包：'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\nlibrary(jsonlite)\n\nprocess_ko_file &lt;- function(ko_file) {\n  ko_file &lt;- normalizePath(ko_file)\n  out_dir &lt;- dirname(ko_file)\n  \n  # 1. 读取 KO 文件\n  df &lt;- read.table(ko_file,\n                   header = FALSE, sep = \"\", stringsAsFactors = FALSE,\n                   fill = TRUE, quote = \"\", comment.char = \"\")\n  if (ncol(df) == 1) df$V2 &lt;- NA_character_\n  colnames(df) &lt;- c(\"GeneID\", \"KO\")\n  \n  # 1.1 清理 KO 列\n  df$KO &lt;- trimws(df$KO)\n  df &lt;- df[!is.na(df$KO) & df$KO != \"\", ]\n  df$KO &lt;- toupper(df$KO)\n  df &lt;- df[grepl(\"^K\\\\d{5}$\", df$KO), , drop = FALSE]\n  \n  # 去重\n  df &lt;- distinct(df)\n  \n  # 2. 获取 KO → Pathway\n  kos &lt;- unique(df$KO)\n  batch_size &lt;- 200\n  link_list &lt;- list()\n  \n  for (i in seq(1, length(kos), by = batch_size)) {\n    batch &lt;- kos[i:min(i + batch_size - 1, length(kos))]\n    tmp &lt;- keggLink(\"pathway\", paste0(\"ko:\", batch))\n    link_list[[length(link_list) + 1]] &lt;- tmp\n    Sys.sleep(0.2)\n  }\n  \n  links &lt;- unlist(link_list)\n  ko2path &lt;- data.frame(\n    KO = sub(\"^ko:\", \"\", names(links)),\n    Pathway = sub(\"^path:\", \"\", links),\n    stringsAsFactors = FALSE\n  )\n  \n  merged &lt;- merge(df, ko2path, by = \"KO\")\n  \n  # 3. 获取 Pathway 名称\n  path_info &lt;- keggList(\"pathway\", \"ko\")\n  path_df &lt;- data.frame(\n    Pathway = sub(\"^path:\", \"\", names(path_info)),\n    Name = as.vector(path_info),\n    stringsAsFactors = FALSE\n  )\n  \n  merged &lt;- merge(merged, path_df, by = \"Pathway\")\n  \n  # 4. 生成 GSON\n  gson &lt;- merged %&gt;%\n    group_by(Pathway, Name) %&gt;%\n    summarise(gene = list(unique(GeneID)), .groups = \"drop\") %&gt;%\n    transmute(id = Pathway, name = Name, gene = gene)\n  \n  gson_file &lt;- file.path(out_dir, \"kegg_user.gson\")\n  write_json(gson, gson_file, pretty = TRUE, auto_unbox = TRUE)\n  \n  # 5. 生成 GMT\n  gmt_lines &lt;- merged %&gt;%\n    group_by(Pathway, Name) %&gt;%\n    summarise(genes = paste(unique(GeneID), collapse = \"\\t\"), .groups = \"drop\") %&gt;%\n    mutate(line = paste(Pathway, Name, genes, sep = \"\\t\")) %&gt;%\n    pull(line)\n  \n  gmt_file &lt;- file.path(out_dir, \"kegg_user.gmt\")\n  writeLines(gmt_lines, gmt_file)\n  \n  cat(\"完成：\", ko_file, \"\\n\",\n      \"生成：\", gson_file, \"\\n\",\n      \"生成：\", gmt_file, \"\\n\",\n      \"保留 KO 数：\", length(kos), \"\\n\",\n      \"映射到通路的条目数：\", nrow(merged), \"\\n\\n\")\n}\n\n# 批量处理两个物种\nko_files &lt;- c(\n  \"rawdata/Pantoea/kegg/Pantoea_ko.txt\",\n  \"rawdata/Burkholderia/kegg/Burkholderia_ko.txt\"\n)\n\nlapply(ko_files, process_ko_file)\n\n\n完成： D:\\数据\\种子代谢物复苏优势菌\\转录组\\rna-seq\\rawdata\\Pantoea\\kegg\\Pantoea_ko.txt \n 生成： D:/数据/种子代谢物复苏优势菌/转录组/rna-seq/rawdata/Pantoea/kegg/kegg_user.gson \n 生成： D:/数据/种子代谢物复苏优势菌/转录组/rna-seq/rawdata/Pantoea/kegg/kegg_user.gmt \n 保留 KO 数： 2381 \n 映射到通路的条目数： 2643 \n\n完成： D:\\数据\\种子代谢物复苏优势菌\\转录组\\rna-seq\\rawdata\\Burkholderia\\kegg\\Burkholderia_ko.txt \n 生成： D:/数据/种子代谢物复苏优势菌/转录组/rna-seq/rawdata/Burkholderia/kegg/kegg_user.gson \n 生成： D:/数据/种子代谢物复苏优势菌/转录组/rna-seq/rawdata/Burkholderia/kegg/kegg_user.gmt \n 保留 KO 数： 2246 \n 映射到通路的条目数： 3772 \n\n\n[[1]]\nNULL\n\n[[2]]\nNULL",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Create genome database</span>"
    ]
  },
  {
    "objectID": "deg.html",
    "href": "deg.html",
    "title": "2  RNA-seq data process",
    "section": "",
    "text": "2.1 Sequencing results",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>RNA-seq data process</span>"
    ]
  },
  {
    "objectID": "deg.html#sequencing-results",
    "href": "deg.html#sequencing-results",
    "title": "2  RNA-seq data process",
    "section": "",
    "text": "2.1.1 上游分析\n\n\nCode\n#!/usr/bin/env bash\nset -Eeuo pipefail\nshopt -s nullglob\n\n###############################################################################\n# Command‐line flags\n###############################################################################\n# 1 = run mapping; 0 = skip mapping entirely\nRUN_MAPPING=1\n\nwhile [[ $# -gt 0 ]]; do\n  case $1 in\n    --skip-map)\n      RUN_MAPPING=0\n      shift\n      ;;\n    *)\n      break\n      ;;\n  esac\ndone\n\n###############################################################################\n# Configuration\n###############################################################################\nWORKDIR=\"$HOME/数据/种子代谢物复苏优势菌/转录组/TPL2025061860/CleanData\"\nOUTDIR=\"$WORKDIR/results\"\nIDXDIR=\"$OUTDIR/idx\"\nSAMD=\"$OUTDIR/sam\"\nBAMD=\"$OUTDIR/bam\"\nCNTD=\"$OUTDIR/counts\"\n\nBUR_FNA=\"$WORKDIR/burkholderia.fasta\"\nPAN_FNA=\"$WORKDIR/pantoea.fasta\"\nBUR_GTF=\"$WORKDIR/burkholderia.gtf\"\nPAN_GTF=\"$WORKDIR/pantoea.gtf\"\nCOMBO_FNA=\"$WORKDIR/combo.fasta\"\nCOMBO_GTF=\"$WORKDIR/combo.gtf\"\n\nBUR_IDX=\"$IDXDIR/burkholderia_idx\"\nPAN_IDX=\"$IDXDIR/pantoea_idx\"\nCOM_IDX=\"$IDXDIR/combo_idx\"\n\nSAMPLES_B=(B_1 B_2 B_3 CK_B_1 CK_B_2 CK_B_3)\nSAMPLES_P=(P_1 P_2 P_3 CK_P_1 CK_P_2 CK_P_3)\nSAMPLES_PB=(PB_1 PB_2 PB_3)\n\nR1_SUFFIX=\"_clean_R1.fq.gz\"\nR2_SUFFIX=\"_clean_R2.fq.gz\"\n\nTHREADS=\"$(nproc)\"\nMAX_THREADS=64\n(( THREADS &gt; MAX_THREADS )) && THREADS=\"$MAX_THREADS\"\nMAPQ=10\nSTRAND=0\n\nPB_B_PREFIX=\"ACSMXP_\"\nPB_P_PREFIX=\"ACSMXK_\"\n\n# force featureCounts to count this feature type (exon/CDS/transcript/gene)\nFEATURE_TYPE=\"${FEATURE_TYPE:-exon}\"\n\n###############################################################################\n# Helper functions\n###############################################################################\nlog()   { echo \"[$(date '+%H:%M:%S')] $*\"; }\nwarn()  { echo \"[$(date '+%H:%M:%S')] [WARN] $*\" &gt;&2; }\ndie()   { echo \"[$(date '+%H:%M:%S')] [ERROR] $*\" &gt;&2; exit 1; }\n\nneed_file() {\n  [[ -f \"$1\" ]] || die \"Missing file: $1\"\n}\n\nbuild_idx() {\n  local fa=\"$1\" prefix=\"$2\"\n  mkdir -p \"$IDXDIR\"\n  local missing=0\n  for i in {1..8}; do\n    [[ -f \"${prefix}.${i}.ht2\" ]] || missing=1\n  done\n  if (( missing == 0 )); then\n    log \"[SKIP] HISAT2 index exists: $(basename \"$prefix\")\"\n  else\n    log \"[RUN ] hisat2-build: $fa → $prefix\"\n    hisat2-build \"$fa\" \"$prefix\"\n    log \"[DONE] index built: $prefix\"\n  fi\n}\n\nmap_and_sort() {\n  local sample=\"$1\" idx=\"$2\"\n  local bam=\"$BAMD/${sample}.sorted.bam\"\n  local r1=\"$WORKDIR/${sample}${R1_SUFFIX}\"\n  local r2=\"$WORKDIR/${sample}${R2_SUFFIX}\"\n  local logf=\"$BAMD/${sample}.hisat2.log\"\n\n  if [[ -f \"$bam\" ]]; then\n    log \"[SKIP] BAM exists: $bam\"\n    return\n  fi\n  if [[ ! -f \"$r1\" || ! -f \"$r2\" ]]; then\n    warn \"Missing FASTQ for $sample: $r1 or $r2\"\n    return\n  fi\n\n  log \"[RUN ] hisat2 → BAM: $sample\"\n  set -o pipefail\n  hisat2 -p \"$THREADS\" -x \"$idx\" -1 \"$r1\" -2 \"$r2\" 2&gt; \"$logf\" \\\n    | samtools view -@ \"$THREADS\" -bS - \\\n    | samtools sort  -@ \"$THREADS\" -o \"$bam\" -\n  set +o pipefail\n\n  samtools index -@ \"$THREADS\" \"$bam\"\n  log \"[DONE] sorted & indexed: $bam\"\n}\n\nrun_featureCounts() {\n  local label=\"$1\"; shift\n  local gtf=\"$1\"; shift\n  local outdir=\"$CNTD/$label\"\n  mkdir -p \"$outdir\"\n\n  local ftype=\"$FEATURE_TYPE\"\n  log \"[INFO] $label: using feature type = $ftype\"\n\n  # Validate that the GTF's third column contains the feature\n  if ! awk -F $'\\t' -v t=\"$ftype\" '$3==t { found=1; exit } END { exit !found }' \"$gtf\"; then\n    die \"GTF $gtf does not contain feature '$ftype'; recheck or set FEATURE_TYPE\"\n  fi\n\n  local bams=()\n  for x in \"$@\"; do\n    [[ -f \"$x\" ]] && bams+=(\"$x\")\n  done\n  (( ${#bams[@]} == 0 )) && { warn \"$label: no BAMs found\"; return; }\n\n  local outfile=\"$outdir/counts_${label}.txt\"\n  log \"[RUN ] featureCounts → $outfile\"\n  featureCounts \\\n    -F GTF \\\n    -t \"$ftype\" \\\n    -g \"transcript_id\" \\\n    -T \"$THREADS\" \\\n    -p -B -C \\\n    -Q \"$MAPQ\" \\\n    -s \"$STRAND\" \\\n    -a \"$gtf\" \\\n    -o \"$outfile\" \\\n    \"${bams[@]}\"\n  log \"[DONE] featureCounts output: $outfile\"\n}\n\nsplit_pb_counts() {\n  local pb_dir=\"$CNTD/PB_on_combo\"\n  local pb_counts=\"$pb_dir/counts_PB_on_combo.txt\"\n  [[ -f \"$pb_counts\" ]] || { warn \"PB_on_combo counts not found\"; return; }\n\n  local out_b=\"$pb_dir/counts_PB_Burkholderia.txt\"\n  local out_p=\"$pb_dir/counts_PB_Pantoea.txt\"\n\n  awk -v p=\"$PB_B_PREFIX\" 'NR==1 || $1~(\"^\"p)' \"$pb_counts\" &gt; \"$out_b\"\n  awk -v p=\"$PB_P_PREFIX\" 'NR==1 || $1~(\"^\"p)' \"$pb_counts\" &gt; \"$out_p\"\n  log \"[SPLIT] PB_on_combo → $(basename $out_b), $(basename $out_p)\"\n}\n\n###############################################################################\n# Main workflow\n###############################################################################\nlog \"Threads = $THREADS\"\ncd \"$WORKDIR\"\n\nmkdir -p \"$IDXDIR\" \"$SAMD\" \"$BAMD\" \"$CNTD\"\nneed_file \"$BUR_FNA\"\nneed_file \"$PAN_FNA\"\nneed_file \"$BUR_GTF\"\nneed_file \"$PAN_GTF\"\n\nbuild_idx \"$BUR_FNA\" \"$BUR_IDX\"\nbuild_idx \"$PAN_FNA\" \"$PAN_IDX\"\n\nif [[ ! -f \"${COM_IDX}.1.ht2\" ]]; then\n  [[ -f \"$COMBO_FNA\" ]] || { cat \"$BUR_FNA\" \"$PAN_FNA\" &gt; \"$COMBO_FNA\"; log \"[GEN ] combo.fasta\"; }\n  [[ -f \"$COMBO_GTF\" ]] || { cat \"$BUR_GTF\" \"$PAN_GTF\" &gt; \"$COMBO_GTF\"; log \"[GEN ] combo.gtf\"; }\n  build_idx \"$COMBO_FNA\" \"$COM_IDX\"\nelse\n  log \"[SKIP] combo index exists\"\nfi\n\nif (( RUN_MAPPING )); then\n  log \"=== Mapping Burkholderia samples ===\"\n  for s in \"${SAMPLES_B[@]}\";  do map_and_sort \"$s\" \"$BUR_IDX\"; done\n\n  log \"=== Mapping Pantoea samples ===\"\n  for s in \"${SAMPLES_P[@]}\";  do map_and_sort \"$s\" \"$PAN_IDX\"; done\n\n  log \"=== Mapping PB_on_combo samples ===\"\n  for s in \"${SAMPLES_PB[@]}\"; do map_and_sort \"$s\" \"$COM_IDX\"; done\nelse\n  log \"[SKIP] mapping stage (--skip-map)\"\nfi\n\nlog \"=== Running featureCounts ===\"\nrun_featureCounts burkholderia \"$BUR_GTF\"    \"$BAMD\"/B_*.sorted.bam  \"$BAMD\"/CK_B_*.sorted.bam\nrun_featureCounts pantoea      \"$PAN_GTF\"   \"$BAMD\"/P_*.sorted.bam  \"$BAMD\"/CK_P_*.sorted.bam\nrun_featureCounts PB_on_combo  \"$COMBO_GTF\" \"$BAMD\"/PB_*.sorted.bam\n\nsplit_pb_counts\n\nlog \"All done.\" \n\n\n[15:05:15] Threads = 8\n/usr/bin/bash: 第 170 行：cd: /c/Users/99374/Documents/数据/种子代谢物复苏优势菌/转录组/TPL2025061860/CleanData: No such file or directory",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>RNA-seq data process</span>"
    ]
  },
  {
    "objectID": "deg.html#deseq2-analysis",
    "href": "deg.html#deseq2-analysis",
    "title": "2  RNA-seq data process",
    "section": "2.2 DESeq2 analysis",
    "text": "2.2 DESeq2 analysis\n\n\nCode\nlibrary(DESeq2)\n\n\n载入需要的程辑包：S4Vectors\n\n\n载入需要的程辑包：stats4\n\n\n载入需要的程辑包：BiocGenerics\n\n\n\n载入程辑包：'BiocGenerics'\n\n\nThe following objects are masked from 'package:stats':\n\n    IQR, mad, sd, var, xtabs\n\n\nThe following objects are masked from 'package:base':\n\n    anyDuplicated, aperm, append, as.data.frame, basename, cbind,\n    colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find,\n    get, grep, grepl, intersect, is.unsorted, lapply, Map, mapply,\n    match, mget, order, paste, pmax, pmax.int, pmin, pmin.int,\n    Position, rank, rbind, Reduce, rownames, sapply, setdiff, sort,\n    table, tapply, union, unique, unsplit, which.max, which.min\n\n\n\n载入程辑包：'S4Vectors'\n\n\nThe following object is masked from 'package:utils':\n\n    findMatches\n\n\nThe following objects are masked from 'package:base':\n\n    expand.grid, I, unname\n\n\n载入需要的程辑包：IRanges\n\n\n\n载入程辑包：'IRanges'\n\n\nThe following object is masked from 'package:grDevices':\n\n    windows\n\n\n载入需要的程辑包：GenomicRanges\n\n\n载入需要的程辑包：GenomeInfoDb\n\n\n载入需要的程辑包：SummarizedExperiment\n\n\n载入需要的程辑包：MatrixGenerics\n\n\n载入需要的程辑包：matrixStats\n\n\n\n载入程辑包：'MatrixGenerics'\n\n\nThe following objects are masked from 'package:matrixStats':\n\n    colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse,\n    colCounts, colCummaxs, colCummins, colCumprods, colCumsums,\n    colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs,\n    colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats,\n    colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds,\n    colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads,\n    colWeightedMeans, colWeightedMedians, colWeightedSds,\n    colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet,\n    rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods,\n    rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps,\n    rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins,\n    rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks,\n    rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars,\n    rowWeightedMads, rowWeightedMeans, rowWeightedMedians,\n    rowWeightedSds, rowWeightedVars\n\n\n载入需要的程辑包：Biobase\n\n\nWelcome to Bioconductor\n\n    Vignettes contain introductory material; view with\n    'browseVignettes()'. To cite Bioconductor, see\n    'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'.\n\n\n\n载入程辑包：'Biobase'\n\n\nThe following object is masked from 'package:MatrixGenerics':\n\n    rowMedians\n\n\nThe following objects are masked from 'package:matrixStats':\n\n    anyMissing, rowMedians\n\n\nCode\nlibrary(openxlsx)\n\n# 统一输出目录\nout_dir &lt;- \"D:/数据/种子代谢物复苏优势菌/转录组/rna-seq/rawdata/DEG_result\"\nif (!dir.exists(out_dir)) dir.create(out_dir, recursive = TRUE)\n\nrun_deseq_and_export &lt;- function(count_file, pattern_treat, pattern_ctrl, \n                                 treat_label, ctrl_label, prefix) {\n  # 1. 读入计数矩阵\n  counts &lt;- read.table(count_file,\n                       header = TRUE, comment.char = \"#\", row.names = 1,\n                       sep = \"\\t\", check.names = FALSE)\n  \n  # 2. 去掉前 5 列注释信息\n  counts &lt;- counts[, 6:ncol(counts)]\n  \n  # 3. 样本信息表\n  sample_info &lt;- data.frame(\n    row.names = colnames(counts),\n    condition = factor(ifelse(grepl(pattern_treat, colnames(counts)), \n                              treat_label, ctrl_label),\n                       levels = c(ctrl_label, treat_label))\n  )\n  \n  # 4. 创建 DESeqDataSet\n  dds &lt;- DESeqDataSetFromMatrix(countData = counts,\n                                colData = sample_info,\n                                design = ~ condition)\n  \n  # 5. 过滤低表达基因\n  keep &lt;- rowSums(counts(dds)) &gt;= 10\n  dds &lt;- dds[keep, ]\n  \n  # 6. 运行 DESeq\n  dds &lt;- DESeq(dds)\n  \n  # 7. 保存 dds 对象\n  saveRDS(dds, file = file.path(out_dir, paste0(\"dds_\", prefix, \".rds\")))\n  \n  # 8. 提取结果\n  res &lt;- results(dds, contrast = c(\"condition\", treat_label, ctrl_label))\n  res_df &lt;- as.data.frame(res)\n  res_df$gene_id &lt;- rownames(res_df)\n  \n  # 9. 保存 CSV\n  write.csv(res_df, file.path(out_dir, paste0(\"DESeq2_results_\", prefix, \".csv\")), \n            row.names = FALSE)\n  \n  # 10. 保存 Excel\n  wb &lt;- createWorkbook()\n  addWorksheet(wb, prefix)\n  writeData(wb, prefix, res_df)\n  saveWorkbook(wb, file.path(out_dir, paste0(\"DESeq2_results_\", prefix, \".xlsx\")), \n               overwrite = TRUE)\n  \n  message(\"✅ \", prefix, \": 已完成 DESeq 分析，结果保存到 \", out_dir)\n}\n\n# Pantoea\nrun_deseq_and_export(\n  count_file = \"D:/数据/种子代谢物复苏优势菌/转录组/work/counts/pantoea/counts_pantoea.txt\",\n  pattern_treat = \"^P_\", pattern_ctrl = \"^CK_P\",\n  treat_label = \"P\", ctrl_label = \"CK_P\",\n  prefix = \"pantoea\"\n)\n\n\nestimating size factors\n\n\nestimating dispersions\n\n\ngene-wise dispersion estimates\n\n\nmean-dispersion relationship\n\n\nfinal dispersion estimates\n\n\nfitting model and testing\n\n\n✅ pantoea: 已完成 DESeq 分析，结果保存到 D:/数据/种子代谢物复苏优势菌/转录组/rna-seq/rawdata/DEG_result\n\n\nCode\n# Burkholderia\nrun_deseq_and_export(\n  count_file = \"D:/数据/种子代谢物复苏优势菌/转录组/work/counts/burkholderia/counts_burkholderia.txt\",\n  pattern_treat = \"^B_\", pattern_ctrl = \"^CK_B\",\n  treat_label = \"B\", ctrl_label = \"CK_B\",\n  prefix = \"burkholderia\"\n)\n\n\nestimating size factors\n\n\nestimating dispersions\n\n\ngene-wise dispersion estimates\n\n\nmean-dispersion relationship\n\n\nfinal dispersion estimates\n\n\nfitting model and testing\n\n\n✅ burkholderia: 已完成 DESeq 分析，结果保存到 D:/数据/种子代谢物复苏优势菌/转录组/rna-seq/rawdata/DEG_result",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>RNA-seq data process</span>"
    ]
  },
  {
    "objectID": "deg.html#deg-results-excelcsv-table",
    "href": "deg.html#deg-results-excelcsv-table",
    "title": "2  RNA-seq data process",
    "section": "2.3 DEG results (Excel/CSV table)",
    "text": "2.3 DEG results (Excel/CSV table)\n\n\nCode\n## 导出 DESeq2 结果到 rawdata/DEG_result（每个物种单独 Excel）\nlibrary(DESeq2)\nlibrary(openxlsx)\n\n# 输出目录\nout_dir &lt;- \"D:/数据/种子代谢物复苏优势菌/转录组/rna-seq/rawdata/DEG_result\"\nif (!dir.exists(out_dir)) dir.create(out_dir, recursive = TRUE)\n\n# 读取对象\ndds_p &lt;- readRDS(\"dds_p.rds\")\n\n\nWarning in gzfile(file, \"rb\"): 无法打开压缩文件'dds_p.rds'，可能是因为'No such\nfile or directory'\n\n\nError in gzfile(file, \"rb\"): 无法打开链结\n\n\nCode\ndds_b &lt;- readRDS(\"dds_b.rds\")\n\n\nWarning in gzfile(file, \"rb\"): 无法打开压缩文件'dds_b.rds'，可能是因为'No such\nfile or directory'\n\n\nError in gzfile(file, \"rb\"): 无法打开链结\n\n\nCode\n# 提取结果\nres_p &lt;- results(dds_p, contrast = c(\"condition\", \"P\", \"CK_P\"))\n\n\nError: 找不到对象'dds_p'\n\n\nCode\nres_b &lt;- results(dds_b, contrast = c(\"condition\", \"B\", \"CK_B\"))\n\n\nError: 找不到对象'dds_b'\n\n\nCode\n# 转为 data.frame 并加 gene_id 列\nres_p_df &lt;- as.data.frame(res_p)\n\n\nError in h(simpleError(msg, call)): 在为'as.data.frame'函数选择方法时评估'x'参数出了错: 找不到对象'res_p' \n\n\nCode\nres_p_df$gene_id &lt;- rownames(res_p_df)\n\n\nError in h(simpleError(msg, call)): 在为'rownames'函数选择方法时评估'x'参数出了错: 找不到对象'res_p_df' \n\n\nCode\nres_b_df &lt;- as.data.frame(res_b)\n\n\nError in h(simpleError(msg, call)): 在为'as.data.frame'函数选择方法时评估'x'参数出了错: 找不到对象'res_b' \n\n\nCode\nres_b_df$gene_id &lt;- rownames(res_b_df)\n\n\nError in h(simpleError(msg, call)): 在为'rownames'函数选择方法时评估'x'参数出了错: 找不到对象'res_b_df' \n\n\nCode\n## 保存 CSV\nwrite.csv(res_p_df, file.path(out_dir, \"DESeq2_results_pantoea.csv\"), row.names = FALSE)\n\n\nError in eval(expr, p): 找不到对象'res_p_df'\n\n\nCode\nwrite.csv(res_b_df, file.path(out_dir, \"DESeq2_results_burkholderia.csv\"), row.names = FALSE)\n\n\nError in eval(expr, p): 找不到对象'res_b_df'\n\n\nCode\n## 保存 Excel（每个物种一个文件）\nwb_p &lt;- createWorkbook()\naddWorksheet(wb_p, \"Pantoea\")\nwriteData(wb_p, \"Pantoea\", res_p_df)\n\n\nError: 找不到对象'res_p_df'\n\n\nCode\nsaveWorkbook(wb_p, file.path(out_dir, \"DESeq2_results_pantoea.xlsx\"), overwrite = TRUE)\n\nwb_b &lt;- createWorkbook()\naddWorksheet(wb_b, \"Burkholderia\")\nwriteData(wb_b, \"Burkholderia\", res_b_df)\n\n\nError: 找不到对象'res_b_df'\n\n\nCode\nsaveWorkbook(wb_b, file.path(out_dir, \"DESeq2_results_burkholderia.xlsx\"), overwrite = TRUE)\n\nmessage(\"✅ 已生成差异表达结果表（每个物种单独 Excel）：\",\n        \"\\n- \", file.path(out_dir, \"DESeq2_results_pantoea.csv\"),\n        \"\\n- \", file.path(out_dir, \"DESeq2_results_burkholderia.csv\"),\n        \"\\n- \", file.path(out_dir, \"DESeq2_results_pantoea.xlsx\"),\n        \"\\n- \", file.path(out_dir, \"DESeq2_results_burkholderia.xlsx\"))\n\n\n✅ 已生成差异表达结果表（每个物种单独 Excel）：\n- D:/数据/种子代谢物复苏优势菌/转录组/rna-seq/rawdata/DEG_result/DESeq2_results_pantoea.csv\n- D:/数据/种子代谢物复苏优势菌/转录组/rna-seq/rawdata/DEG_result/DESeq2_results_burkholderia.csv\n- D:/数据/种子代谢物复苏优势菌/转录组/rna-seq/rawdata/DEG_result/DESeq2_results_pantoea.xlsx\n- D:/数据/种子代谢物复苏优势菌/转录组/rna-seq/rawdata/DEG_result/DESeq2_results_burkholderia.xlsx",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>RNA-seq data process</span>"
    ]
  },
  {
    "objectID": "function-analysis.html",
    "href": "function-analysis.html",
    "title": "3  Mechanism analysis",
    "section": "",
    "text": "3.1 combine annotation and deg\nCode\n## 检查 DESeq2 结果与 KEGG 基因集的基因名匹配度（Pantoea & Burkholderia，去掉 .tXX 后缀）\nlibrary(jsonlite)\nlibrary(DESeq2)\n\n\n载入需要的程辑包：S4Vectors\n\n\n载入需要的程辑包：stats4\n\n\n载入需要的程辑包：BiocGenerics\n\n\n\n载入程辑包：'BiocGenerics'\n\n\nThe following objects are masked from 'package:stats':\n\n    IQR, mad, sd, var, xtabs\n\n\nThe following objects are masked from 'package:base':\n\n    anyDuplicated, aperm, append, as.data.frame, basename, cbind,\n    colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find,\n    get, grep, grepl, intersect, is.unsorted, lapply, Map, mapply,\n    match, mget, order, paste, pmax, pmax.int, pmin, pmin.int,\n    Position, rank, rbind, Reduce, rownames, sapply, setdiff, sort,\n    table, tapply, union, unique, unsplit, which.max, which.min\n\n\n\n载入程辑包：'S4Vectors'\n\n\nThe following object is masked from 'package:utils':\n\n    findMatches\n\n\nThe following objects are masked from 'package:base':\n\n    expand.grid, I, unname\n\n\n载入需要的程辑包：IRanges\n\n\n\n载入程辑包：'IRanges'\n\n\nThe following object is masked from 'package:grDevices':\n\n    windows\n\n\n载入需要的程辑包：GenomicRanges\n\n\n载入需要的程辑包：GenomeInfoDb\n\n\n载入需要的程辑包：SummarizedExperiment\n\n\n载入需要的程辑包：MatrixGenerics\n\n\n载入需要的程辑包：matrixStats\n\n\n\n载入程辑包：'MatrixGenerics'\n\n\nThe following objects are masked from 'package:matrixStats':\n\n    colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse,\n    colCounts, colCummaxs, colCummins, colCumprods, colCumsums,\n    colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs,\n    colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats,\n    colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds,\n    colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads,\n    colWeightedMeans, colWeightedMedians, colWeightedSds,\n    colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet,\n    rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods,\n    rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps,\n    rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins,\n    rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks,\n    rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars,\n    rowWeightedMads, rowWeightedMeans, rowWeightedMedians,\n    rowWeightedSds, rowWeightedVars\n\n\n载入需要的程辑包：Biobase\n\n\nWelcome to Bioconductor\n\n    Vignettes contain introductory material; view with\n    'browseVignettes()'. To cite Bioconductor, see\n    'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'.\n\n\n\n载入程辑包：'Biobase'\n\n\nThe following object is masked from 'package:MatrixGenerics':\n\n    rowMedians\n\n\nThe following objects are masked from 'package:matrixStats':\n\n    anyMissing, rowMedians\n\n\nCode\n# 1. 读取 gson 文件（基因集）\npantoea_gson &lt;- fromJSON(\"rawdata/Pantoea/kegg/kegg_user.gson\")\nburkholderia_gson &lt;- fromJSON(\"rawdata/Burkholderia/kegg/kegg_user.gson\")\n\nmake_gene_sets &lt;- function(df) {\n  # 去掉 .tXX 后缀\n  df$gene &lt;- lapply(df$gene, function(g) sub(\"\\\\.t\\\\d+$\", \"\", g))\n  sets &lt;- setNames(df$gene, df$id)\n  names(sets) &lt;- paste(df$id, df$name, sep = \": \")\n  return(sets)\n}\n\npantoea_sets &lt;- make_gene_sets(pantoea_gson)\nburkholderia_sets &lt;- make_gene_sets(burkholderia_gson)\n\n# 2. 读取 DESeq2 对象\ndds_p &lt;- readRDS(\"rawdata/DEG_result/dds_pantoea.rds\")\ndds_b &lt;- readRDS(\"rawdata/DEG_result/dds_burkholderia.rds\")\n\nres_p &lt;- results(dds_p)\nres_b &lt;- results(dds_b)\n\n# 3. 构造 geneList（全量排序，去掉 .tXX 后缀）\ngeneList_p &lt;- res_p$log2FoldChange\nnames(geneList_p) &lt;- sub(\"\\\\.t\\\\d+$\", \"\", rownames(res_p))\ngeneList_p &lt;- sort(geneList_p, decreasing = TRUE)\n\ngeneList_b &lt;- res_b$log2FoldChange\nnames(geneList_b) &lt;- sub(\"\\\\.t\\\\d+$\", \"\", rownames(res_b))\ngeneList_b &lt;- sort(geneList_b, decreasing = TRUE)\n\n# 4. 匹配检查函数（打印前几个匹配/未匹配基因）\ncheck_name_match &lt;- function(geneList, gene_sets, label, n_show = 10) {\n  genes_in_list &lt;- names(geneList)\n  genes_in_sets &lt;- unique(unlist(gene_sets, use.names = FALSE))\n  common_genes &lt;- intersect(genes_in_list, genes_in_sets)\n  unmatched_genes &lt;- setdiff(genes_in_list, genes_in_sets)\n  \n  cat(\"\\n====\", label, \"====\\n\")\n  cat(\"geneList 基因数：\", length(genes_in_list), \"\\n\")\n  cat(\"基因集中的基因数：\", length(genes_in_sets), \"\\n\")\n  cat(\"匹配上的基因数：\", length(common_genes), \"\\n\")\n  cat(\"匹配比例（相对于 geneList）：\",\n      round(length(common_genes) / length(genes_in_list) * 100, 2), \"%\\n\")\n  \n  cat(\"\\n前\", n_show, \"个匹配到的基因名示例:\\n\")\n  print(head(common_genes, n_show))\n  \n  cat(\"\\n前\", n_show, \"个未匹配到的基因名示例:\\n\")\n  print(head(unmatched_genes, n_show))\n  \n  invisible(list(common = common_genes, unmatched = unmatched_genes))\n}\n\n# 5. 检查匹配比例并打印示例\nmatch_p &lt;- check_name_match(geneList_p, pantoea_sets, \"Pantoea\", n_show = 10)\n\n\n\n==== Pantoea ====\ngeneList 基因数： 4564 \n基因集中的基因数： 887 \n匹配上的基因数： 884 \n匹配比例（相对于 geneList）： 19.37 %\n\n前 10 个匹配到的基因名示例:\n [1] \"ACSMXK_13025\" \"ACSMXK_13030\" \"ACSMXK_00125\" \"ACSMXK_10330\" \"ACSMXK_00140\"\n [6] \"ACSMXK_13040\" \"ACSMXK_13035\" \"ACSMXK_07470\" \"ACSMXK_07475\" \"ACSMXK_00135\"\n\n前 10 个未匹配到的基因名示例:\n [1] \"ACSMXK_21765\" \"ACSMXK_21775\" \"ACSMXK_21770\" \"ACSMXK_21780\" \"ACSMXK_16465\"\n [6] \"ACSMXK_10325\" \"ACSMXK_21790\" \"ACSMXK_08620\" \"ACSMXK_21785\" \"ACSMXK_21795\"\n\n\nCode\nmatch_b &lt;- check_name_match(geneList_b, burkholderia_sets, \"Burkholderia\", n_show = 10)\n\n\n\n==== Burkholderia ====\ngeneList 基因数： 7304 \n基因集中的基因数： 1101 \n匹配上的基因数： 1100 \n匹配比例（相对于 geneList）： 15.06 %\n\n前 10 个匹配到的基因名示例:\n [1] \"ACSMXP_35140\" \"ACSMXP_22575\" \"ACSMXP_34115\" \"ACSMXP_00960\" \"ACSMXP_18535\"\n [6] \"ACSMXP_24400\" \"ACSMXP_34225\" \"ACSMXP_22570\" \"ACSMXP_34175\" \"ACSMXP_29725\"\n\n前 10 个未匹配到的基因名示例:\n [1] \"ACSMXP_20900\" \"ACSMXP_20885\" \"ACSMXP_32285\" \"ACSMXP_20895\" \"ACSMXP_35135\"\n [6] \"ACSMXP_20880\" \"ACSMXP_35150\" \"ACSMXP_35130\" \"ACSMXP_32320\" \"ACSMXP_32300\"",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Mechanism analysis</span>"
    ]
  }
]